<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="../styles/common.css">
    <link rel="stylesheet" type="text/css" href="../styles/movie-details.css">
    <title rel="shortcut icon">üòä Movie Reviews</title>
    <link rel="shortcut icon" href="../res/logo.png" />
</head>
<body>


<div class="top-bar">
    <div class="logo">Êò†ÁîªÊâπË©ï</div>
    <nav>
        <div class="menu-button" id="main">–ì–ª–∞–≤–Ω–æ–µ</div>
        <div class="menu-button" id="favorites">–ú–æ—ë</div>
        <% if (session.user && session.user.id === 1) { %>
            <div class="menu-button" id="panel">–ü–∞–Ω–µ–ª—å</div>
        <% } %>
        <div class="menu-button" id="search">–ü–æ–∏—Å–∫</div>
        <div class="menu-button" id="profile">–ü—Ä–æ—Ñ–∏–ª—å</div>
    </nav>
</div>

<div class="big-movie-container">
    <div class="poster-and-content">
        <img class="poster" src="../res/posters/<%= movie.poster %>" alt="<%= movie.title %> Poster">
        <div class="movie-content">
            <div class="movie-title" id="movie-title"><%= movie.title %> (<%= movie.year %>)</div>
            <div class="movie-details" id="movie-details">
                <p>–ì–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: <%= movie.year %></p>
                <p>–°—Ç—Ä–∞–Ω–∞: <%= movie.country %></p>
                <p>–†–µ–∂–∏—Å—Å–µ—Ä: <%= movie.director %></p>
                <p>–†–µ–π—Ç–∏–Ω–≥: <%= parseFloat(movie.rating).toFixed(1) %></p>
            </div>
            <div class="movie-description" id="movie-description">
                <%= movie.description %>
            </div>
        </div>
    </div>
    <div class="rating-section">
        <div class="rating-buttons">
            <span>–û—Ü–µ–Ω–∏—Ç–µ:</span>
            <div id="rating-container"></div>
        </div>
        <div class="big-rating">
            <span>–†–µ–π—Ç–∏–Ω–≥:</span>
            <div id="rating"><%= parseFloat(movie.rating).toFixed(1) %></div>
        </div>
    </div>


    <div class="review-section">
        <button class="review-button" id="review-button">–ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é</button>
            <form class="review-form" action="/movie" method="post" id="review-form" style="display: none;">
                <input class="form-epigraph" type="text" placeholder="–≠–ø–∏–≥—Ä–∞—Ñ">
                <textarea class="form-text" placeholder="–¢–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏"></textarea>
                <div class="error-message" id="errorMessage"></div>
                <div class="review-buttons">
                    <button type="button" class="review-form-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="review-form-accept">–ì–æ—Ç–æ–≤–æ</button>
                </div>
            </form>
        <span>–†–µ—Ü–µ–Ω–∑–∏–∏ –∑—Ä–∏—Ç–µ–ª–µ–π</span>
        <div class="review-container" id="review-container">
            <% reviews.forEach(review => { %>
                <div class="review" id="review">
                    <div class="review-top-bar">
                        <div class="review-username" id="review-username"><%= review.User.username %></div>
                        <button class="review-like">ü§ç</button>
                    </div>
                    <div class="review-epigraph" id="review-epigraph"><%= review.reviewEpigraph %></div>
                    <div class="review-text" id="review-text"><%= review.reviewText %></div>
                </div>
            <% }); %>
        </div>
    </div>
</div>

<footer>
    <div class="footer">
        <a class="git-button" id="github" href="https://github.com/eyonyann/Course-project-3" target="_blank">GitHub</a>
    </div>
</footer>

<script>
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É—Å—Ç–Ω—ã–π —Å–º–∞–π–ª–∏–∫
    const sadSmiley = 'üòû';

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    function handleVisibilityChange() {
        if (document.hidden) {
            document.title = sadSmiley + ' Movie Reviews'; // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ –≥—Ä—É—Å—Ç–Ω—ã–π —Å–º–∞–π–ª–∏–∫
        } else {
            document.title = 'üòä Movie Reviews'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    document.addEventListener('visibilitychange', handleVisibilityChange);
    var ratingContainer = document.getElementById('rating-container');

    for (var i = 1; i <= 10; i++) {
        var button = document.createElement('button');
        button.classList.add('rating-star');
        button.textContent = i;

        ratingContainer.appendChild(button);
    }

    const mainButton = document.getElementById('main');
    const myButton = document.getElementById('favorites');
    const panelButton = document.getElementById('panel');
    const searchButton = document.getElementById('search');
    const profileButton = document.getElementById('profile');
    const gitButton = document.getElementById('github');
    const signInButton = document.getElementById('signIn');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    mainButton.addEventListener('click', () => {
        window.location.href = '/';
    });

    myButton.addEventListener('click', () => {
        window.location.href = '/favorites';
    });

    panelButton.addEventListener('click', () => {
        window.location.href = '/panel';
    });

    searchButton.addEventListener('click', () => {
        window.location.href = '/search';
    });

    profileButton.addEventListener('click', () => {
        window.location.href = '/profile';
    });

    document.addEventListener('DOMContentLoaded', function() {
        const ratingButtons = document.querySelectorAll('.rating-star');
        let currentRating = null;
        const movieId = window.location.pathname.split('/').pop(); // This should be dynamically set based on the movie being rated

        ratingButtons.forEach(button => {
            button.addEventListener('click', async function() {
                const selectedRating = parseInt(button.textContent);
                /*const userId = 'YOUR_USER_ID';*/ // Replace this with actual user session ID or similar identifier
                // Toggle active class
                if (selectedRating === currentRating) {
                    button.classList.remove('rating-star-active');
                    currentRating = selectedRating;
                } else {
                    ratingButtons.forEach(btn => btn.classList.remove('rating-star-active'));
                    button.classList.add('rating-star-active');
                    currentRating = selectedRating;
                }

                try {
                    const response = await fetch('/movie/:id', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ movieId, userRating: currentRating })
                    });

                    const data = await response.json();
                    if (response.ok) {
                        console.log('Rating updated successfully:', data);
                        document.getElementById('rating').textContent = data.rating.toFixed(1);
                    } else {
                        throw new Error(data.message || 'Failed to rate movie');
                    }
                } catch (error) {
                    console.error('Error submitting rating:', error);
                }
            });
        });
    });


    document.addEventListener('DOMContentLoaded', function() {
        const reviewButton = document.getElementById('review-button');
        const reviewForm = document.getElementById('review-form');
        const cancelReviewButton = document.querySelector('.review-form-cancel');
        const submitReviewButton = document.querySelector('.review-form-accept');

        // Toggle review form visibility
        reviewButton.addEventListener('click', function() {
            if (reviewForm.style.display === 'none' || reviewForm.style.display === '') {
                reviewForm.style.display = 'block';
            } else {
                reviewForm.style.display = 'none';
                reviewForm.reset();  // Reset form fields when closing the form
            }
        });

        // Handle review form submission
        submitReviewButton.addEventListener('click', async function(event) {
            event.preventDefault(); // Prevent the form from submitting in the traditional way
            const reviewEpigraph = document.querySelector('.form-epigraph').value;
            const reviewText = document.querySelector('.form-text').value;
            const errorMessage = document.getElementById('errorMessage');

            if (reviewEpigraph === "" || reviewText === "") {
                errorMessage.textContent = '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!';
                return;
            }

            try {
                const response = await fetch('/movie/:id', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        movieId: window.location.pathname.split('/').pop(),
                        reviewEpigraph,
                        reviewText
                    })
                });

                const data = await response.json();
                if (data.success) {
                    console.log('Review submitted successfully:', data.message);
                    reviewForm.style.display = 'none';  // Close form on successful submission
                    reviewForm.reset();  // Reset form fields after submission
                    window.location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error submitting review:', error.message);
            }
        });

        // Handle review cancellation
        cancelReviewButton.addEventListener('click', function() {
            reviewForm.style.display = 'none';
            reviewForm.reset();  // Reset form fields when cancelling
            errorMessage.textContent = '';
        });
    });

</script>

</body>
</html>
