<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="../styles/common.css">
    <link rel="stylesheet" type="text/css" href="../styles/movie-details.css">
    <title rel="shortcut icon">üòä Movie Reviews</title>
    <link rel="shortcut icon" href="../res/logo.png" />
</head>
<body>


<div class="top-bar">
    <div class="logo">Êò†ÁîªÊâπË©ï</div>
    <nav>
        <button class="menu-button" id="main" onclick="navigateTo('/')">–ì–ª–∞–≤–Ω–æ–µ</button>
        <button class="menu-button" id="favorites" onclick="navigateTo('/favorites')">–ú–æ—ë</button>
        <% if (session.user && session.user.id === 1) { %>
            <button class="menu-button" id="panel" onclick="navigateTo('/panel')">–ü–∞–Ω–µ–ª—å</button>
        <% } %>
        <button class="menu-button" id="search" onclick="navigateTo('/search')">–ü–æ–∏—Å–∫</button>
        <button class="menu-button" id="profile" onclick="navigateTo('/profile')">–ü—Ä–æ—Ñ–∏–ª—å</button>
    </nav>
</div>

<div class="big-movie-container">
    <div class="poster-and-content">
        <img class="poster" src="../res/posters/<%= movie.poster %>" alt="<%= movie.title %> Poster">
        <div class="movie-content">
            <div class="movie-title" id="movie-title"><%= movie.title %> (<%= movie.year %>)</div>
            <div class="movie-details" id="movie-details">
                <p>–ì–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞: <%= movie.year %></p>
                <p>–°—Ç—Ä–∞–Ω–∞: <%= movie.country %></p>
                <p>–†–µ–∂–∏—Å—Å–µ—Ä: <%= movie.director %></p>
                <p>–†–µ–π—Ç–∏–Ω–≥: <%= parseFloat(movie.rating).toFixed(1) %></p>
            </div>
            <div class="movie-description" id="movie-description">
                <%= movie.description %>
            </div>
        </div>
    </div>
    <% if (session.user && session.user.id === 1) { %>
        <div class="edit-buttons">
            <button class="delete-button" onclick="confirmDelete(<%= movie.id %>)">–£–¥–∞–ª–∏—Ç—å</button>
            <button class="edit-button" onclick="editMovie(<%= movie.id %>)">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        </div>
    <% } %>

    <div class="rating-section">
        <div class="rating-buttons">
            <span>–û—Ü–µ–Ω–∏—Ç–µ:</span>
            <div id="rating-container">
                <% for (var i = 1; i <= 10; i++) {%>
                    <% if (userRating && (userRating.rating == i) ) {%>
                        <button class="rating-star rating-star-active"><%=i%></button>
                    <%} else {%>
                        <button class="rating-star"><%=i%></button>
                    <%}%>
                <%}%>
            </div>
        </div>
        <div class="big-rating">
            <span>–†–µ–π—Ç–∏–Ω–≥:</span>
            <div id="rating"><%= parseFloat(movie.rating).toFixed(1) %></div>
        </div>
    </div>


    <div class="review-section">
        <% if (userReview && userReview.movieId == movie.id) { %>
            <button class="review-form-button" id="review-button">–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é</button>
            <form class="review-form" action="/movie" method="post" id="review-form" style="display: none;">
                <input class="form-epigraph" type="text" placeholder="–≠–ø–∏–≥—Ä–∞—Ñ" value="<%= userReview.reviewEpigraph %>">
                <textarea class="form-text" placeholder="–¢–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏"><%= userReview.reviewText %></textarea>
                <div class="error-message" id="errorMessage"></div>
                <div class="review-buttons">
                    <button type="button" class="review-form-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" class="review-form-accept">–ì–æ—Ç–æ–≤–æ</button>
                </div>
            </form>
        <% } else { %>
            <button class="review-form-button" id="review-button">–ù–∞–ø–∏—Å–∞—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é</button>
                <form class="review-form" action="/movie" method="post" id="review-form" style="display: none;">
                    <input class="form-epigraph" type="text" placeholder="–≠–ø–∏–≥—Ä–∞—Ñ">
                    <textarea class="form-text" placeholder="–¢–µ–∫—Å—Ç —Ä–µ—Ü–µ–Ω–∑–∏–∏"></textarea>
                    <div class="error-message" id="errorMessage"></div>
                    <div class="review-form-buttons">
                        <button type="button" class="review-form-cancel">–û—Ç–º–µ–Ω–∞</button>
                        <button type="submit" class="review-form-accept">–ì–æ—Ç–æ–≤–æ</button>
                    </div>
                </form>
        <% } %>
        <span>–†–µ—Ü–µ–Ω–∑–∏–∏ –∑—Ä–∏—Ç–µ–ª–µ–π</span>
        <div class="review-container" id="review-container">
            <% reviews.forEach(review => { %>
                <div class="review" id="review<%= review.id %>">
                    <div class="review-top-bar">
                        <div class="review-username" id="review-username"><%= review.User.username %></div>
                        <div class="review-buttons">
                            <% if (session.user && (session.user.id === 1 || session.user.id === review.userId)) { %>
                                <button class="review-delete" onclick="deleteReview(<%= movie.id %> , <%= review.userId %>)">–£–¥–∞–ª–∏—Ç—å</button>
                            <% } %>

                            <button class="review-like" id="reviewLikeButton<%= review.id %>" onclick="setLike(<%= session.user.id %>, <%= review.id %>)">ü§ç</button>
                            <% if (reviewLikes !== undefined) {
                                const userLike = reviewLikes.find(like => like.reviewId === review.id && like.userId === session.user.id);
                            if (userLike) { %>
                                <script>document.getElementById('reviewLikeButton<%= review.id %>').classList.add('review-like-active');</script>
                            <% }
                            } %>
                        </div>
                    </div>
                    <div class="review-epigraph" id="review-epigraph"><%= review.reviewEpigraph %></div>
                    <div class="review-text" id="review-text<%= review.id %>" data-full-text="<%= review.reviewText %>"><%= review.reviewText.substring(0, 500) %>...</div>

                    <button class="review-text-show-more-button" id="review-text-show-more-button<%= review.id %>" onclick="showMore(<%= JSON.stringify(review.reviewText) %>, <%= review.id %>)">–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ</button>
                </div>
            <% }); %>
        </div>


    </div>
</div>

<footer>
    <div class="footer">
        <a class="git-button" id="github" href="https://github.com/eyonyann/Course-project-3" target="_blank">GitHub</a>
    </div>
</footer>

<script>
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É—Å—Ç–Ω—ã–π —Å–º–∞–π–ª–∏–∫
    const sadSmiley = 'üòû';

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    function handleVisibilityChange() {
        if (document.hidden) {
            document.title = sadSmiley + ' Movie Reviews'; // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞ –≥—Ä—É—Å—Ç–Ω—ã–π —Å–º–∞–π–ª–∏–∫
        } else {
            document.title = 'üòä Movie Reviews'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª–∞–¥–∫–∏
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª–∞–¥–∫–∏
    document.addEventListener('visibilitychange', handleVisibilityChange);



    function navigateTo(url) {
        window.location.href = url;
    }


    document.addEventListener('DOMContentLoaded', function() {
        const ratingButtons = document.querySelectorAll('.rating-star');
        let currentRating = null;
        <% if (userRating) { %>
            currentRating = <%= userRating.rating %>;
        <% } %>

        const movieId = window.location.pathname.split('/').pop(); // This should be dynamically set based on the movie being rated

        ratingButtons.forEach(button => {
            button.addEventListener('click', async function() {
                const selectedRating = parseInt(button.textContent);
                /*const userId = 'YOUR_USER_ID';*/ // Replace this with actual user session ID or similar identifier
                // Toggle active class
                if (selectedRating === currentRating) {
                    button.classList.remove('rating-star-active');
                    currentRating = selectedRating;
                } else {
                    ratingButtons.forEach(btn => btn.classList.remove('rating-star-active'));
                    button.classList.add('rating-star-active');
                    currentRating = selectedRating;
                }

                try {
                    const response = await fetch('/movie/:id', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ movieId, userRating: currentRating })
                    });

                    const data = await response.json();
                    if (response.ok) {
                        console.log('Rating updated successfully:', data);
                        document.getElementById('rating').textContent = data.rating.toFixed(1);
                    } else {
                        throw new Error(data.message || 'Failed to rate movie');
                    }
                } catch (error) {
                    console.error('Error submitting rating:', error);
                }
            });
        });
    });


    document.addEventListener('DOMContentLoaded', function() {
        const reviewButton = document.getElementById('review-button');
        const reviewForm = document.getElementById('review-form');
        const cancelReviewButton = document.querySelector('.review-form-cancel');
        const submitReviewButton = document.querySelector('.review-form-accept');

        // Toggle review form visibility
        reviewButton.addEventListener('click', function() {
            if (reviewForm.style.display === 'none' || reviewForm.style.display === '') {
                reviewForm.style.display = 'block';
            } else {
                reviewForm.style.display = 'none';
                reviewForm.reset();  // Reset form fields when closing the form
            }
        });

        // Handle review form submission
        submitReviewButton.addEventListener('click', async function(event) {
            event.preventDefault(); // Prevent the form from submitting in the traditional way
            const reviewEpigraph = document.querySelector('.form-epigraph').value;
            const reviewText = encodeURIComponent(document.querySelector('.form-text').value); // –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ—Ü–µ–Ω–∑–∏–∏
            const errorMessage = document.getElementById('errorMessage');

            if (reviewEpigraph === "" || reviewText === "") {
                errorMessage.textContent = '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!';
                return;
            }

            try {
                const response = await fetch('/movie/:id', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        movieId: window.location.pathname.split('/').pop(),
                        reviewEpigraph,
                        reviewText
                    })
                });

                const data = await response.json();
                if (data.success) {
                    console.log('Review submitted successfully:', data.message);
                    reviewForm.style.display = 'none';  // Close form on successful submission
                    reviewForm.reset();  // Reset form fields after submission
                    window.location.reload();
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error submitting review:', error.message);
            }
        });

        // Handle review cancellation
        cancelReviewButton.addEventListener('click', function() {
            reviewForm.style.display = 'none';
            reviewForm.reset();  // Reset form fields when cancelling
            errorMessage.textContent = '';
        });
    });



    function editMovie(movieId) {
        window.location.href = `/movie/${movieId}/edit`;
    }

    function confirmDelete(movieId) {
        if (confirm("–¢–æ—á–Ω–æ –ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º?")) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ
            deleteMovie(movieId);
        }
    }

    async function deleteMovie(movieId) {
        try {
            const response = await fetch(`/movie/${movieId}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                window.location.href = '/';
            } else {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞
                console.error('Failed to delete movie');
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º');
            }
        } catch (error) {
            console.error('Error deleting movie:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–∞');
        }
    }

    async function deleteReview(movieId, userId) {
        try {
            const response = await fetch(`/movie/${movieId}/deleteReview?userId=${userId}`, {
                method: 'DELETE'
            });
            if (response.ok) {
                location.reload();
            } else {
                console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é');
                alert('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–Ω–∑–∏—é');
            }
        } catch (error) {
            console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ—Ü–µ–Ω–∑–∏–∏');
        }
    }

    function showMore(fullText, reviewId) {
        // Get the element containing the truncated text
        var textElement = document.getElementById('review-text' + reviewId);

        // Replace the truncated text with the full text
        textElement.innerText = fullText;

        // Hide the "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ" button
        var showMoreButton = document.getElementById('review-text-show-more-button' + reviewId);
        showMoreButton.style.display = 'none';
    }


    async function setLike(userId, reviewId) {
        try {
            const response = await fetch('/likeReview', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ userId, reviewId })
            });

            if (response.ok) {
                const responseData = await response.json();
                const likeButton = document.getElementById(`reviewLikeButton${reviewId}`);
                if (responseData.liked) {
                    // Set the like button style to indicate it's liked
                    likeButton.classList.add('review-like-active');
                    likeButton.classList.remove('review-like');
                } else {
                    // Remove the like button style to indicate it's unliked
                    likeButton.classList.add('review-like');
                    likeButton.classList.remove('review-like-active');
                }
            } else {
                throw new Error('Failed to set like for review');
            }
        } catch (error) {
            console.error('Error setting like for review:', error);
        }
    }


</script>

</body>
</html>
